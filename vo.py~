import numpy as np
from matplotlib import pyplot as plt
import tf
import threading
import rospy
import sys
import time
import random

class showTrajectory(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.v_data = np.zeros((40,40))
        
    def setPoint(self,x,y):
        px = int(40 + x*5)
        py = int(-60 + y*5)
        self.v_data[px,py] = 1
        self.ax.set_aspect('equal')
        self.ax.pcolor(self.v_data,cmap=plt.cm.Reds,edgecolors='k')

    def run(self):
        fig,self.ax=plt.subplots()
        #self.ax.pcolor(self.v_data,cmap=plt.cm.Reds,edgecolors='k')
        #plt.show()
        while True:
            plt.pause(1)
         #   ax.pcolor(self.v_data,cmap=plt.cm.Reds,edgecolors='k')
             #time.sleep(0.1)
 
class sampleVO:
    def __init__(self):
        self.tmap = showTrajectory()


    def run(self):
        rospy.spin()


def callback(data):
    x = data.twist.twist.linear.x * 1.
    y = data.twist.twist.linear.y * 1.
    tmap.setPoint(x, y)

rospy.init_node('odom_listener', anonymous=True)
listener = tf.TransformListener()
    
if __name__ == '__main__':
    tmap = showTrajectory()
    tmap.start()
    rospy.sleep(1.0)
    while True:
        rospy.sleep(0.1)
        (trans,rot) = listener.lookupTransform('odom', 'base_footprint', rospy.Time(0))
        euler = tf.transformations.euler_from_quaternion(rot)
	roll = euler[0]
	pitch = euler[1]
	yaw = euler[2]
        print yaw
        tmap.setPoint(trans[0], trans[1])

    
